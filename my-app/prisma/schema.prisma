generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String  @id @default(cuid())
  identifier_token String  @unique
  email            String  @unique
  hashed_password  String?
  name             String?

  classes      ClassMember[]
  RefreshToken RefreshToken[]

  @@map("user")
}

model RefreshToken {
  id            Int    @id @unique @default(autoincrement())
  refresh_token String @unique @db.VarChar(300)
  user          User   @relation(references: [id], fields: [user_id], onDelete: Cascade)
  user_id       String

  @@index([user_id])
  @@map("refresh_token")
}

model Class {
  id          String        @id @default(cuid())
  name        String
  desc        String?
  students    ClassMember[]
  assignments Assignment[]
  invite_id   String      @unique
}

model ClassMember {
  userId     String
  classId    String
  user       User         @relation(fields: [userId], references: [id])
  class      Class        @relation(fields: [classId], references: [id])
  status     MemberStatus
  Submission Submission[]

  @@id([userId, classId])
}

model Assignment {
  id          String       @id
  name        String
  desc        String?
  classId     String
  class       Class        @relation(fields: [classId], references: [id])
  submissions Submission[]
}

model Submission {
  id           String           @id
  assignmentId String
  studentId    String
  classId      String
  student      ClassMember      @relation(fields: [studentId, classId], references: [userId, classId])
  assignment   Assignment       @relation(fields: [assignmentId], references: [id])
  status       SubmissionStatus

  grade        Int?
}

enum SubmissionStatus {
  COMPLETED
  INCOMPLETED
}

enum MemberStatus {
  STUDENT
  TEACHER
}
